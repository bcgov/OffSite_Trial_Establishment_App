// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again:
// With a Flutter package, run `flutter pub run build_runner build`.
// With a Dart package, run `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart';
import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';

import 'data/entities/company_entity.dart';
import 'data/entities/planter_entity.dart';
import 'data/entities/planting_entity.dart';
import 'data/entities/trial_entity.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <ModelEntity>[
  ModelEntity(
      id: const IdUid(1, 594478692636722198),
      name: 'CompanyEntity',
      lastPropertyId: const IdUid(11, 1108708220799769982),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 791804527954531988),
            name: 'dbId',
            type: 6,
            flags: 129),
        ModelProperty(
            id: const IdUid(3, 6141324441296078620),
            name: 'lastName',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 7463373742099372426),
            name: 'firstName',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 2492880415889060661),
            name: 'email',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 6313201716682188762),
            name: 'phone',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 5159097727673748273),
            name: 'companyId',
            type: 9,
            flags: 2080,
            indexId: const IdUid(13, 7158061989562940018)),
        ModelProperty(
            id: const IdUid(10, 7501697274069414980),
            name: 'organization',
            type: 9,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(3, 5317533064052738785),
      name: 'PlanterEntity',
      lastPropertyId: const IdUid(15, 2126314326609083310),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 1499764633223182632),
            name: 'dbId',
            type: 6,
            flags: 129),
        ModelProperty(
            id: const IdUid(2, 2338474335421060203),
            name: 'planterId',
            type: 9,
            flags: 2080,
            indexId: const IdUid(2, 5415248603092897397)),
        ModelProperty(
            id: const IdUid(3, 3258953186687206381),
            name: 'lastName',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 4907336396391108935),
            name: 'firstName',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 7664923569139644090),
            name: 'organization',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 5885959987823828070),
            name: 'email',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(8, 1473954476935674869),
            name: 'phone',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(13, 6657413000102743001),
            name: 'syncStatusOB',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(14, 6979302266208765400),
            name: 'nickname',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(15, 2126314326609083310),
            name: 'isActive',
            type: 1,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(11, 792778238117278519),
      name: 'TrialEntity',
      lastPropertyId: const IdUid(10, 7533433010292548909),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 6468687561810159855),
            name: 'dbId',
            type: 6,
            flags: 129),
        ModelProperty(
            id: const IdUid(2, 3240734798970343305),
            name: 'trialId',
            type: 9,
            flags: 2080,
            indexId: const IdUid(16, 9041058036724159258)),
        ModelProperty(
            id: const IdUid(3, 3753808239627877712),
            name: 'contactId',
            type: 11,
            flags: 520,
            indexId: const IdUid(17, 4008487060125156265),
            relationTarget: 'CompanyEntity'),
        ModelProperty(
            id: const IdUid(4, 5992723478178677238),
            name: 'objective',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 8063080224743655076),
            name: 'syncStatusOB',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(8, 1530690602756106205),
            name: 'modifiedDate',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(9, 4215400252789393598),
            name: 'nickname',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(10, 7533433010292548909),
            name: 'planterId',
            type: 11,
            flags: 520,
            indexId: const IdUid(24, 5390070711152385928),
            relationTarget: 'PlanterEntity')
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(12, 870141336448409363),
      name: 'PlantingEntity',
      lastPropertyId: const IdUid(30, 3541826458901453435),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 7281384492971975535),
            name: 'dbId',
            type: 6,
            flags: 129),
        ModelProperty(
            id: const IdUid(4, 5924560107765428012),
            name: 'date',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 4519695017560331214),
            name: 'longitude',
            type: 8,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 3242309961401528572),
            name: 'latitude',
            type: 8,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 3968220906698068180),
            name: 'elevation',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(8, 2534496531813890132),
            name: 'series',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(9, 6977972075122356358),
            name: 'count',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(10, 1809558924829056303),
            name: 'seedlot',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(11, 8524563053875565552),
            name: 'spacing',
            type: 8,
            flags: 0),
        ModelProperty(
            id: const IdUid(12, 3874996729815128165),
            name: 'notes',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(14, 8542103565782431028),
            name: 'speciesOB',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(15, 6644122037459899371),
            name: 'smrOB',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(16, 7318184459256635258),
            name: 'snrOB',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(17, 4912586810173379220),
            name: 'soilOB',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(18, 7989583715135571152),
            name: 'preparationOB',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(19, 4022138524274676346),
            name: 'blockId',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(22, 8215000432888555126),
            name: 'trialId',
            type: 11,
            flags: 520,
            indexId: const IdUid(20, 8393929372675507451),
            relationTarget: 'TrialEntity'),
        ModelProperty(
            id: const IdUid(26, 5995548764396437122),
            name: 'plantingId',
            type: 9,
            flags: 2080,
            indexId: const IdUid(22, 8099153832059739719)),
        ModelProperty(
            id: const IdUid(27, 7401713076942623204),
            name: 'planterId',
            type: 11,
            flags: 520,
            indexId: const IdUid(23, 7388657098346380538),
            relationTarget: 'PlanterEntity'),
        ModelProperty(
            id: const IdUid(28, 3331176729884362443),
            name: 'syncStatusOB',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(29, 553184668838439545),
            name: 'modifiedDate',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(30, 3541826458901453435),
            name: 'photos',
            type: 30,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[])
];

/// Open an ObjectBox store with the model declared in this file.
Future<Store> openStore(
        {String? directory,
        int? maxDBSizeInKB,
        int? fileMode,
        int? maxReaders,
        bool queriesCaseSensitiveDefault = true,
        String? macosApplicationGroup}) async =>
    Store(getObjectBoxModel(),
        directory: directory ?? (await defaultStoreDirectory()).path,
        maxDBSizeInKB: maxDBSizeInKB,
        fileMode: fileMode,
        maxReaders: maxReaders,
        queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
        macosApplicationGroup: macosApplicationGroup);

/// ObjectBox model definition, pass it to [Store] - Store(getObjectBoxModel())
ModelDefinition getObjectBoxModel() {
  final model = ModelInfo(
      entities: _entities,
      lastEntityId: const IdUid(13, 1637849164182931396),
      lastIndexId: const IdUid(24, 5390070711152385928),
      lastRelationId: const IdUid(3, 197819118695518904),
      lastSequenceId: const IdUid(0, 0),
      retiredEntityUids: const [
        6930889832095056233,
        926926152626793042,
        3890313362207023526,
        9179638773379195886,
        1074691606623624414,
        2856283921004685014,
        3307449604589305938,
        5516656933158026569,
        1637849164182931396
      ],
      retiredIndexUids: const [
        5890364263006420407,
        2917172567793286153,
        7508452919796723417,
        6184216469514473070,
        1682108686268556777,
        894195663655265413,
        950569241063230882,
        4585186368762681710
      ],
      retiredPropertyUids: const [
        8729995404575610904,
        917245315952633315,
        777370349209542835,
        6817415791062687707,
        6209075233228905692,
        5497612406858651521,
        2401027208123922668,
        2119532334401933002,
        1021539971222568933,
        4618382205957020384,
        7731982344591437824,
        944184929308930209,
        1160023757715643888,
        3286327973416676833,
        4530670876533438234,
        609207335705623218,
        1305409579102917735,
        279138441136679417,
        6564689425578662882,
        5524768124224462141,
        5824212622582926582,
        3848530044868421269,
        988125731038855152,
        1121101361033466560,
        6385694699258949767,
        1835198525782671564,
        6933747039485832392,
        4782974582741820937,
        7262186697724826566,
        5808830337437303009,
        5273905006644967264,
        2565210368671576392,
        1368383471200101207,
        3598344862984379135,
        7040849573089664977,
        2487689321833642447,
        9110493031140701166,
        6916889480182221718,
        1653383442064647150,
        1421816668836039307,
        409224205296308601,
        4974109636914652147,
        1450966879568190246,
        5332337998016810588,
        1748541781872126061,
        3384673055309950515,
        4914812595305982581,
        8380413885232322209,
        2985401229305238759,
        3761316427125561870,
        7190669480422739526,
        8748855634084214359,
        8173008277194282350,
        952943786039099614,
        3664557612732033868,
        4203718918586494465,
        3444060809109009593,
        5105540468745107308,
        3759998143976475975,
        5063134934793074981,
        3760802306719697337,
        1506293375207848904,
        318541660126673546,
        4563683184532657624,
        74853863176786442,
        4297793111936025073,
        5999340037585880182,
        1552681895237494865,
        8750191946531729263,
        247927819632127880,
        7863549176796101317,
        831050741811278842,
        3432487412961176572,
        4735963960806872796,
        6147756505969835601,
        3973681579441005848,
        2004256469483276610,
        3596853679249574413,
        5400819523612688836,
        6365677157945835912,
        1108708220799769982
      ],
      retiredRelationUids: const [
        6797866242457063964,
        7445534213376946681,
        197819118695518904
      ],
      modelVersion: 5,
      modelVersionParserMinimum: 5,
      version: 1);

  final bindings = <Type, EntityDefinition>{
    CompanyEntity: EntityDefinition<CompanyEntity>(
        model: _entities[0],
        toOneRelations: (CompanyEntity object) => [],
        toManyRelations: (CompanyEntity object) => {},
        getId: (CompanyEntity object) => object.dbId,
        setId: (CompanyEntity object, int id) {
          object.dbId = id;
        },
        objectToFB: (CompanyEntity object, fb.Builder fbb) {
          final lastNameOffset = fbb.writeString(object.lastName);
          final firstNameOffset = fbb.writeString(object.firstName);
          final emailOffset = fbb.writeString(object.email);
          final phoneOffset = fbb.writeString(object.phone);
          final companyIdOffset = fbb.writeString(object.companyId);
          final organizationOffset = fbb.writeString(object.organization);
          fbb.startTable(12);
          fbb.addInt64(0, object.dbId);
          fbb.addOffset(2, lastNameOffset);
          fbb.addOffset(3, firstNameOffset);
          fbb.addOffset(4, emailOffset);
          fbb.addOffset(5, phoneOffset);
          fbb.addOffset(6, companyIdOffset);
          fbb.addOffset(9, organizationOffset);
          fbb.finish(fbb.endTable());
          return object.dbId;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = CompanyEntity(
              dbId: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              companyId: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 16, ''),
              organization: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 22, ''),
              lastName: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 8, ''),
              firstName: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 10, ''),
              email: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 12, ''),
              phone: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 14, ''));

          return object;
        }),
    PlanterEntity: EntityDefinition<PlanterEntity>(
        model: _entities[1],
        toOneRelations: (PlanterEntity object) => [],
        toManyRelations: (PlanterEntity object) => {},
        getId: (PlanterEntity object) => object.dbId,
        setId: (PlanterEntity object, int id) {
          object.dbId = id;
        },
        objectToFB: (PlanterEntity object, fb.Builder fbb) {
          final planterIdOffset = fbb.writeString(object.planterId);
          final lastNameOffset = fbb.writeString(object.lastName);
          final firstNameOffset = fbb.writeString(object.firstName);
          final organizationOffset = fbb.writeString(object.organization);
          final emailOffset = fbb.writeString(object.email);
          final phoneOffset = fbb.writeString(object.phone);
          final nicknameOffset = fbb.writeString(object.nickname);
          fbb.startTable(16);
          fbb.addInt64(0, object.dbId);
          fbb.addOffset(1, planterIdOffset);
          fbb.addOffset(2, lastNameOffset);
          fbb.addOffset(3, firstNameOffset);
          fbb.addOffset(5, organizationOffset);
          fbb.addOffset(6, emailOffset);
          fbb.addOffset(7, phoneOffset);
          fbb.addInt64(12, object.syncStatusOB);
          fbb.addOffset(13, nicknameOffset);
          fbb.addBool(14, object.isActive);
          fbb.finish(fbb.endTable());
          return object.dbId;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = PlanterEntity(
              planterId: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, ''),
              nickname: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 30, ''),
              lastName: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 8, ''),
              firstName: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 10, ''),
              email: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 16, ''),
              phone: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 18, ''),
              organization: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 14, ''),
              isActive:
                  const fb.BoolReader().vTableGet(buffer, rootOffset, 32, false))
            ..dbId = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0)
            ..syncStatusOB = const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 28);

          return object;
        }),
    TrialEntity: EntityDefinition<TrialEntity>(
        model: _entities[2],
        toOneRelations: (TrialEntity object) =>
            [object.contact, object.planter],
        toManyRelations: (TrialEntity object) => {},
        getId: (TrialEntity object) => object.dbId,
        setId: (TrialEntity object, int id) {
          object.dbId = id;
        },
        objectToFB: (TrialEntity object, fb.Builder fbb) {
          final trialIdOffset = fbb.writeString(object.trialId);
          final objectiveOffset = fbb.writeString(object.objective);
          final nicknameOffset = fbb.writeString(object.nickname);
          fbb.startTable(11);
          fbb.addInt64(0, object.dbId);
          fbb.addOffset(1, trialIdOffset);
          fbb.addInt64(2, object.contact.targetId);
          fbb.addOffset(3, objectiveOffset);
          fbb.addInt64(6, object.syncStatusOB);
          fbb.addInt64(7, object.modifiedDate.millisecondsSinceEpoch);
          fbb.addOffset(8, nicknameOffset);
          fbb.addInt64(9, object.planter.targetId);
          fbb.finish(fbb.endTable());
          return object.dbId;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = TrialEntity(
              dbId: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              trialId: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, ''),
              nickname: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 20, ''),
              contact: ToOne(
                  targetId: const fb.Int64Reader()
                      .vTableGet(buffer, rootOffset, 8, 0)),
              objective: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 10, ''),
              modifiedDate: DateTime.fromMillisecondsSinceEpoch(
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 18, 0)),
              planter: ToOne(
                  targetId: const fb.Int64Reader().vTableGet(buffer, rootOffset, 22, 0)))
            ..syncStatusOB = const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 16);
          object.contact.attach(store);
          object.planter.attach(store);
          return object;
        }),
    PlantingEntity: EntityDefinition<PlantingEntity>(
        model: _entities[3],
        toOneRelations: (PlantingEntity object) =>
            [object.trial, object.planter],
        toManyRelations: (PlantingEntity object) => {},
        getId: (PlantingEntity object) => object.dbId,
        setId: (PlantingEntity object, int id) {
          object.dbId = id;
        },
        objectToFB: (PlantingEntity object, fb.Builder fbb) {
          final seriesOffset = fbb.writeString(object.series);
          final seedlotOffset = fbb.writeString(object.seedlot);
          final notesOffset = fbb.writeString(object.notes);
          final blockIdOffset = fbb.writeString(object.blockId);
          final plantingIdOffset = fbb.writeString(object.plantingId);
          final photosOffset = fbb.writeList(
              object.photos.map(fbb.writeString).toList(growable: false));
          fbb.startTable(31);
          fbb.addInt64(0, object.dbId);
          fbb.addInt64(3, object.date.millisecondsSinceEpoch);
          fbb.addFloat64(4, object.longitude);
          fbb.addFloat64(5, object.latitude);
          fbb.addInt64(6, object.elevation);
          fbb.addOffset(7, seriesOffset);
          fbb.addInt64(8, object.count);
          fbb.addOffset(9, seedlotOffset);
          fbb.addFloat64(10, object.spacing);
          fbb.addOffset(11, notesOffset);
          fbb.addInt64(13, object.speciesOB);
          fbb.addInt64(14, object.smrOB);
          fbb.addInt64(15, object.snrOB);
          fbb.addInt64(16, object.soilOB);
          fbb.addInt64(17, object.preparationOB);
          fbb.addOffset(18, blockIdOffset);
          fbb.addInt64(21, object.trial.targetId);
          fbb.addOffset(25, plantingIdOffset);
          fbb.addInt64(26, object.planter.targetId);
          fbb.addInt64(27, object.syncStatusOB);
          fbb.addInt64(28, object.modifiedDate.millisecondsSinceEpoch);
          fbb.addOffset(29, photosOffset);
          fbb.finish(fbb.endTable());
          return object.dbId;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = PlantingEntity(
              dbId: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              plantingId: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 54, ''),
              blockId: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 40, ''),
              date: DateTime.fromMillisecondsSinceEpoch(
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 10, 0)),
              trial: ToOne(
                  targetId: const fb.Int64Reader()
                      .vTableGet(buffer, rootOffset, 46, 0)),
              longitude: const fb.Float64Reader()
                  .vTableGetNullable(buffer, rootOffset, 12),
              latitude: const fb.Float64Reader()
                  .vTableGetNullable(buffer, rootOffset, 14),
              elevation: const fb.Int64Reader()
                  .vTableGetNullable(buffer, rootOffset, 16),
              photos:
                  const fb.ListReader<String>(fb.StringReader(asciiOptimization: true), lazy: false).vTableGet(buffer, rootOffset, 62, []),
              series: const fb.StringReader(asciiOptimization: true).vTableGet(buffer, rootOffset, 18, ''),
              count: const fb.Int64Reader().vTableGet(buffer, rootOffset, 20, 0),
              seedlot: const fb.StringReader(asciiOptimization: true).vTableGet(buffer, rootOffset, 22, ''),
              spacing: const fb.Float64Reader().vTableGet(buffer, rootOffset, 24, 0),
              notes: const fb.StringReader(asciiOptimization: true).vTableGet(buffer, rootOffset, 26, ''),
              planter: ToOne(targetId: const fb.Int64Reader().vTableGet(buffer, rootOffset, 56, 0)),
              modifiedDate: DateTime.fromMillisecondsSinceEpoch(const fb.Int64Reader().vTableGet(buffer, rootOffset, 60, 0)))
            ..speciesOB =
                const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 30)
            ..smrOB =
                const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 32)
            ..snrOB =
                const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 34)
            ..soilOB =
                const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 36)
            ..preparationOB =
                const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 38)
            ..syncStatusOB = const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 58);
          object.trial.attach(store);
          object.planter.attach(store);
          return object;
        })
  };

  return ModelDefinition(model, bindings);
}

/// [CompanyEntity] entity fields to define ObjectBox queries.
class CompanyEntity_ {
  /// see [CompanyEntity.dbId]
  static final dbId =
      QueryIntegerProperty<CompanyEntity>(_entities[0].properties[0]);

  /// see [CompanyEntity.lastName]
  static final lastName =
      QueryStringProperty<CompanyEntity>(_entities[0].properties[1]);

  /// see [CompanyEntity.firstName]
  static final firstName =
      QueryStringProperty<CompanyEntity>(_entities[0].properties[2]);

  /// see [CompanyEntity.email]
  static final email =
      QueryStringProperty<CompanyEntity>(_entities[0].properties[3]);

  /// see [CompanyEntity.phone]
  static final phone =
      QueryStringProperty<CompanyEntity>(_entities[0].properties[4]);

  /// see [CompanyEntity.companyId]
  static final companyId =
      QueryStringProperty<CompanyEntity>(_entities[0].properties[5]);

  /// see [CompanyEntity.organization]
  static final organization =
      QueryStringProperty<CompanyEntity>(_entities[0].properties[6]);
}

/// [PlanterEntity] entity fields to define ObjectBox queries.
class PlanterEntity_ {
  /// see [PlanterEntity.dbId]
  static final dbId =
      QueryIntegerProperty<PlanterEntity>(_entities[1].properties[0]);

  /// see [PlanterEntity.planterId]
  static final planterId =
      QueryStringProperty<PlanterEntity>(_entities[1].properties[1]);

  /// see [PlanterEntity.lastName]
  static final lastName =
      QueryStringProperty<PlanterEntity>(_entities[1].properties[2]);

  /// see [PlanterEntity.firstName]
  static final firstName =
      QueryStringProperty<PlanterEntity>(_entities[1].properties[3]);

  /// see [PlanterEntity.organization]
  static final organization =
      QueryStringProperty<PlanterEntity>(_entities[1].properties[4]);

  /// see [PlanterEntity.email]
  static final email =
      QueryStringProperty<PlanterEntity>(_entities[1].properties[5]);

  /// see [PlanterEntity.phone]
  static final phone =
      QueryStringProperty<PlanterEntity>(_entities[1].properties[6]);

  /// see [PlanterEntity.syncStatusOB]
  static final syncStatusOB =
      QueryIntegerProperty<PlanterEntity>(_entities[1].properties[7]);

  /// see [PlanterEntity.nickname]
  static final nickname =
      QueryStringProperty<PlanterEntity>(_entities[1].properties[8]);

  /// see [PlanterEntity.isActive]
  static final isActive =
      QueryBooleanProperty<PlanterEntity>(_entities[1].properties[9]);
}

/// [TrialEntity] entity fields to define ObjectBox queries.
class TrialEntity_ {
  /// see [TrialEntity.dbId]
  static final dbId =
      QueryIntegerProperty<TrialEntity>(_entities[2].properties[0]);

  /// see [TrialEntity.trialId]
  static final trialId =
      QueryStringProperty<TrialEntity>(_entities[2].properties[1]);

  /// see [TrialEntity.contact]
  static final contact = QueryRelationToOne<TrialEntity, CompanyEntity>(
      _entities[2].properties[2]);

  /// see [TrialEntity.objective]
  static final objective =
      QueryStringProperty<TrialEntity>(_entities[2].properties[3]);

  /// see [TrialEntity.syncStatusOB]
  static final syncStatusOB =
      QueryIntegerProperty<TrialEntity>(_entities[2].properties[4]);

  /// see [TrialEntity.modifiedDate]
  static final modifiedDate =
      QueryIntegerProperty<TrialEntity>(_entities[2].properties[5]);

  /// see [TrialEntity.nickname]
  static final nickname =
      QueryStringProperty<TrialEntity>(_entities[2].properties[6]);

  /// see [TrialEntity.planter]
  static final planter = QueryRelationToOne<TrialEntity, PlanterEntity>(
      _entities[2].properties[7]);
}

/// [PlantingEntity] entity fields to define ObjectBox queries.
class PlantingEntity_ {
  /// see [PlantingEntity.dbId]
  static final dbId =
      QueryIntegerProperty<PlantingEntity>(_entities[3].properties[0]);

  /// see [PlantingEntity.date]
  static final date =
      QueryIntegerProperty<PlantingEntity>(_entities[3].properties[1]);

  /// see [PlantingEntity.longitude]
  static final longitude =
      QueryDoubleProperty<PlantingEntity>(_entities[3].properties[2]);

  /// see [PlantingEntity.latitude]
  static final latitude =
      QueryDoubleProperty<PlantingEntity>(_entities[3].properties[3]);

  /// see [PlantingEntity.elevation]
  static final elevation =
      QueryIntegerProperty<PlantingEntity>(_entities[3].properties[4]);

  /// see [PlantingEntity.series]
  static final series =
      QueryStringProperty<PlantingEntity>(_entities[3].properties[5]);

  /// see [PlantingEntity.count]
  static final count =
      QueryIntegerProperty<PlantingEntity>(_entities[3].properties[6]);

  /// see [PlantingEntity.seedlot]
  static final seedlot =
      QueryStringProperty<PlantingEntity>(_entities[3].properties[7]);

  /// see [PlantingEntity.spacing]
  static final spacing =
      QueryDoubleProperty<PlantingEntity>(_entities[3].properties[8]);

  /// see [PlantingEntity.notes]
  static final notes =
      QueryStringProperty<PlantingEntity>(_entities[3].properties[9]);

  /// see [PlantingEntity.speciesOB]
  static final speciesOB =
      QueryIntegerProperty<PlantingEntity>(_entities[3].properties[10]);

  /// see [PlantingEntity.smrOB]
  static final smrOB =
      QueryIntegerProperty<PlantingEntity>(_entities[3].properties[11]);

  /// see [PlantingEntity.snrOB]
  static final snrOB =
      QueryIntegerProperty<PlantingEntity>(_entities[3].properties[12]);

  /// see [PlantingEntity.soilOB]
  static final soilOB =
      QueryIntegerProperty<PlantingEntity>(_entities[3].properties[13]);

  /// see [PlantingEntity.preparationOB]
  static final preparationOB =
      QueryIntegerProperty<PlantingEntity>(_entities[3].properties[14]);

  /// see [PlantingEntity.blockId]
  static final blockId =
      QueryStringProperty<PlantingEntity>(_entities[3].properties[15]);

  /// see [PlantingEntity.trial]
  static final trial = QueryRelationToOne<PlantingEntity, TrialEntity>(
      _entities[3].properties[16]);

  /// see [PlantingEntity.plantingId]
  static final plantingId =
      QueryStringProperty<PlantingEntity>(_entities[3].properties[17]);

  /// see [PlantingEntity.planter]
  static final planter = QueryRelationToOne<PlantingEntity, PlanterEntity>(
      _entities[3].properties[18]);

  /// see [PlantingEntity.syncStatusOB]
  static final syncStatusOB =
      QueryIntegerProperty<PlantingEntity>(_entities[3].properties[19]);

  /// see [PlantingEntity.modifiedDate]
  static final modifiedDate =
      QueryIntegerProperty<PlantingEntity>(_entities[3].properties[20]);

  /// see [PlantingEntity.photos]
  static final photos =
      QueryStringVectorProperty<PlantingEntity>(_entities[3].properties[21]);
}
